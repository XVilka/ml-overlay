commit cd7e59c6f0095a6680acd4b968893e06f7b3db23
Author: hhugo <hugo.heuzard@gmail.com>
Date:   Fri May 24 16:54:58 2019 +0800

    Misc: Remove an unnecessary compat module (#797)
    
    Also restore compat with ocaml 4.02.3

Index: js_of_ocaml-3.4.0/compiler/lib/stdlib.ml
===================================================================
--- js_of_ocaml-3.4.0.orig/compiler/lib/stdlib.ml
+++ js_of_ocaml-3.4.0/compiler/lib/stdlib.ml
@@ -259,6 +259,12 @@ end = struct
 
   let size t = Array.length t.arr * int_num_bits
 
+  let is_empty = function
+    | "" -> true
+    | _ -> false
+
+  let equal (a : string) (b : string) = Poly.(a = b)
+
   let mem {arr} i =
     let idx = i / int_num_bits in
     let off = i mod int_num_bits in
Index: js_of_ocaml-3.4.0/ppx/ppx_js/lib/dune
===================================================================
--- js_of_ocaml-3.4.0.orig/ppx/ppx_js/lib/dune
+++ js_of_ocaml-3.4.0/ppx/ppx_js/lib/dune
@@ -13,7 +13,3 @@
 (rule
   (targets ppx_js_internal.ml)
   (action (copy %{dep:../lib_internal/ppx_js_internal.ml} %{targets})))
-
-(rule
-  (targets compat.ml)
-  (action (copy %{dep:../lib_internal/compat.ml} %{targets})))
Index: js_of_ocaml-3.4.0/ppx/ppx_js/lib_internal/compat.ml-4.08
===================================================================
--- js_of_ocaml-3.4.0.orig/ppx/ppx_js/lib_internal/compat.ml-4.08
+++ /dev/null
@@ -1,30 +0,0 @@
-open StdLabels
-open Migrate_parsetree
-open OCaml_406.Ast
-open! Ast_mapper
-open Ast_helper
-open Asttypes
-open Parsetree
-open! Ast_convenience_406
-
-module Ast_mapper = struct
-  let extension_of_error ({kind; main; sub} : Location.error) =
-    if kind <> Location.Report_error
-    then raise (Invalid_argument "extension_of_error: expected kind Report_error");
-    let str_of_pp pp_msg = Format.asprintf "%t" pp_msg in
-    let extension_of_sub (sub : Location.msg) =
-      ( {Location.loc = sub.loc; txt = "ocaml.error"}
-      , Parsetree.(
-          PStr [Str.eval (Exp.constant (Pconst_string (str_of_pp sub.txt, None)))]) )
-    in
-    (* Remove the duplicated error bellow once switching to Ast 4.08 *)
-    ( {loc = main.loc; txt = "ocaml.error"}
-    , PStr
-        (Str.eval (Exp.constant (Pconst_string (str_of_pp main.txt, None)))
-        :: Str.eval (Exp.constant (Pconst_string (str_of_pp main.txt, None)))
-        :: List.map ~f:(fun msg -> Str.extension (extension_of_sub msg)) sub) )
-end
-
-module Location = struct
-  let msg = Location.msg
-end
Index: js_of_ocaml-3.4.0/ppx/ppx_js/lib_internal/compat.ml-default
===================================================================
--- js_of_ocaml-3.4.0.orig/ppx/ppx_js/lib_internal/compat.ml-default
+++ /dev/null
@@ -1,21 +0,0 @@
-open StdLabels
-open Migrate_parsetree
-open OCaml_406.Ast
-open! Ast_mapper
-open Ast_helper
-open Asttypes
-open Parsetree
-open! Ast_convenience_406
-
-module Ast_mapper = struct
-  let rec extension_of_error ({loc; msg; if_highlight; sub} : Location.error) =
-    ( {loc; txt = "ocaml.error"}
-    , PStr
-        ([ Str.eval (Exp.constant (Pconst_string (msg, None)))
-         ; Str.eval (Exp.constant (Pconst_string (if_highlight, None))) ]
-        @ List.map ~f:(fun ext -> Str.extension (extension_of_error ext)) sub) )
-end
-
-module Location = struct
-  let msg = Location.errorf
-end
Index: js_of_ocaml-3.4.0/ppx/ppx_js/lib_internal/dune
===================================================================
--- js_of_ocaml-3.4.0.orig/ppx/ppx_js/lib_internal/dune
+++ js_of_ocaml-3.4.0/ppx/ppx_js/lib_internal/dune
@@ -3,13 +3,5 @@
   (libraries compiler-libs.common
              ocaml-migrate-parsetree
              ppx_tools_versioned)
-  (modules ppx_js_internal compat)
   (kind ppx_rewriter)
   (preprocess (pps ppx_tools_versioned.metaquot_406)))
-
-(rule
-  (targets compat.ml)
-  (deps ../../../tools/select/select.exe
-        compat.ml-4.08
-        compat.ml-default)
-  (action (with-stdout-to %{targets} (run %{deps}))))
\ No newline at end of file
Index: js_of_ocaml-3.4.0/ppx/ppx_js/lib_internal/ppx_js_internal.ml
===================================================================
--- js_of_ocaml-3.4.0.orig/ppx/ppx_js/lib_internal/ppx_js_internal.ml
+++ js_of_ocaml-3.4.0/ppx/ppx_js/lib_internal/ppx_js_internal.ml
@@ -461,18 +461,13 @@ let preprocess_literal_object mappper fi
         if id.txt <> txt then Printf.sprintf " (normalized to %S)" txt else ""
       in
       let sub =
-        [ Compat.Location.msg
-            ~loc:id'.loc
-            "Duplicated val or method %S%s."
-            id'.txt
-            (details id') ]
+        [id'.loc, Printf.sprintf "Duplicated val or method %S%s." id'.txt (details id')]
       in
-      Location.raise_errorf
+      Ast_mapper.make_error_of_message
         ~loc:id.loc
         ~sub
-        "Duplicated val or method %S%s."
-        id.txt
-        (details id)
+        (Printf.sprintf "Duplicated val or method %S%s." id.txt (details id))
+      |> Ast_mapper.raise_error
     else S.add txt id names
   in
   let drop_prefix ~prefix s =
@@ -533,7 +528,7 @@ let preprocess_literal_object mappper fi
           "This field is not valid inside a js literal object."
   in
   try `Fields (List.rev (snd (List.fold_left fields ~init:(S.empty, []) ~f)))
-  with Location.Error error -> `Error (Compat.Ast_mapper.extension_of_error error)
+  with Location.Error error -> `Error (Ast_mapper.extension_of_error error)
 
 (* {[ object%js (self)
      val readonlyprop = e1
