Index: labltk-8.06.8/browser/searchid.ml
===================================================================
--- labltk-8.06.8.orig/browser/searchid.ml
+++ labltk-8.06.8/browser/searchid.ml
@@ -296,7 +296,7 @@ let search_string_type text ~mode =
       try (Typemod.transl_signature !start_env sexp).sig_type with _ ->
       let env = List.fold_left !module_list ~init:!start_env ~f:
         begin fun acc m ->
-          try open_pers_signature m acc with Env.Error _ -> acc
+          Result.fold ~error:(fun _ -> acc) ~ok:(fun x -> x) (open_pers_signature m acc)
         end in
       try (Typemod.transl_signature env sexp).sig_type
       with Env.Error err -> []
Index: labltk-8.06.8/browser/searchpos.ml
===================================================================
--- labltk-8.06.8.orig/browser/searchpos.ml
+++ labltk-8.06.8/browser/searchpos.ml
@@ -207,8 +207,8 @@ let rec search_pos_signature l ~pos ~env
       Psig_open {popen_override=ovf; popen_expr=id} ->
         let path, mt = lookup_module ~loc:Location.none id.txt env in
         begin match open_signature ovf path env with
-          Some env -> env
-        | None -> env
+          Ok env -> env
+        | Error _ -> env
         end
     | sign_item ->
         try add_signature (Typemod.transl_signature env [pt]).sig_type env
@@ -351,7 +351,7 @@ let top_widgets = ref []
 
 let dummy_item =
   Sig_modtype (Ident.create_local "dummy",
-               {mtd_type=None; mtd_attributes=[]; mtd_loc=Location.none},
+               {mtd_type=None; mtd_attributes=[]; mtd_loc=Location.none; mtd_uid=(Types.Uid.mk "dummy")},
                Exported)
 
 let remove_prefix ~prefix s =
@@ -364,8 +364,8 @@ let rec view_signature ?title ?path ?(en
   let env =
     match path with None -> env
     | Some path ->
-        match Env.open_signature Fresh path env with None -> env
-        | Some env -> env
+        match Env.open_signature Fresh path env with Error _ -> env
+        | Ok env -> env
   in
   let title =
     match title, path with Some title, _ -> title
@@ -551,7 +551,7 @@ and view_expr_type ?title ?path ?env ?(n
   in
   view_signature ~title ?path ?env
     [Sig_value (id, {val_type = t; val_kind = Val_reg; val_attributes=[];
-                     val_loc = Location.none}, Exported)]
+                     val_loc = Location.none; val_uid=Types.Uid.mk "reg"}, Exported)]
 
 and view_decl lid ~kind ~env =
   match kind with
@@ -649,7 +649,7 @@ let view_type kind ~env =
   | `Class (path, cty) ->
       let cld = { cty_params = []; cty_variance = []; cty_type = cty;
                   cty_path = path; cty_new = None; cty_loc = Location.none;
-                  cty_attributes = []} in
+                  cty_attributes = []; cty_uid=Types.Uid.mk "cld"} in
       view_signature_item ~path ~env
         [Sig_class(ident_of_path path ~default:"c", cld, Trec_first,
                    Exported)]
@@ -658,7 +658,7 @@ let view_type kind ~env =
         Mty_signature sign -> view_signature sign ~path ~env
       | modtype ->
           let md =
-	    {md_type = mty; md_attributes = []; md_loc = Location.none} in
+	    {md_type = mty; md_attributes = []; md_loc = Location.none; md_uid=Types.Uid.mk "md"} in
           view_signature_item ~path ~env
             [Sig_module(ident_of_path path ~default:"M", Mp_present,
                         md, Trec_not, Exported)]
@@ -722,6 +722,48 @@ let view_type_menu kind ~env ~parent =
 let found_str = ref ([] : (fkind * Env.t * Location.t) list)
 let add_found_str = add_found ~found:found_str
 
+let rec search_pos_pat_comp ~pos ~env (pat: computation general_pattern) =
+  if in_loc pat.pat_loc ~pos then begin
+  begin match pat.pat_desc with
+    Tpat_exception pat -> search_pos_pat_val pat ~pos ~env
+  | Tpat_or (a, b, None) ->
+      search_pos_pat_comp a ~pos ~env; search_pos_pat_comp b ~pos ~env
+  | Tpat_or (_, _, Some _) ->
+      ()
+  | Tpat_value _ -> ()
+  end;
+  add_found_str (`Exp(`Pat, pat.pat_type)) ~env ~loc:pat.pat_loc
+  end
+  and
+  search_pos_pat_val ~pos ~env (pat: value general_pattern) =
+  if in_loc pat.pat_loc ~pos then begin
+  begin match pat.pat_desc with
+    Tpat_any -> ()
+  | Tpat_var (id, _) ->
+      add_found_str (`Exp(`Val (Pident id), pat.pat_type))
+        ~env ~loc:pat.pat_loc
+  | Tpat_alias (pat, _, _) -> search_pos_pat_val pat ~pos ~env
+  | Tpat_lazy pat -> search_pos_pat_val pat ~pos ~env
+  | Tpat_constant _ ->
+      add_found_str (`Exp(`Const, pat.pat_type)) ~env ~loc:pat.pat_loc
+  | Tpat_tuple l ->
+      List.iter l ~f:(search_pos_pat_val ~pos ~env)
+  | Tpat_construct (_, _, l) ->
+      List.iter l ~f:(search_pos_pat_val ~pos ~env)
+  | Tpat_variant (_, None, _) -> ()
+  | Tpat_variant (_, Some pat, _) -> search_pos_pat_val pat ~pos ~env
+  | Tpat_record (l, _) ->
+      List.iter l ~f:(fun (_, _, pat) -> search_pos_pat_val pat ~pos ~env)
+  | Tpat_array l ->
+      List.iter l ~f:(search_pos_pat_val ~pos ~env)
+  | Tpat_or (a, b, None) ->
+      search_pos_pat_val a ~pos ~env; search_pos_pat_val b ~pos ~env
+  | Tpat_or (_, _, Some _) ->
+      ()
+  end;
+  add_found_str (`Exp(`Pat, pat.pat_type)) ~env ~loc:pat.pat_loc
+  end
+
 let rec search_pos_structure ~pos str =
   List.iter str ~f:
   begin function str -> match str.str_desc with
@@ -731,7 +773,7 @@ let rec search_pos_structure ~pos str =
       begin fun {vb_pat=pat;vb_expr=exp} ->
         let env =
           if rec_flag = Asttypes.Recursive then exp.exp_env else Env.empty in
-        search_pos_pat pat ~pos ~env;
+        search_pos_pat_val pat ~pos ~env;
         search_pos_expr exp ~pos
       end
   | Tstr_module mb -> search_pos_module_expr mb.mb_expr ~pos
@@ -775,7 +817,7 @@ and search_pos_class_expr ~pos cl =
     | Tcl_structure cls ->
         search_pos_class_structure ~pos cls
     | Tcl_fun (_, pat, iel, cl, _) ->
-        search_pos_pat pat ~pos ~env:pat.pat_env;
+        search_pos_pat_val pat ~pos ~env:pat.pat_env;
         List.iter iel ~f:(fun (_, exp) -> search_pos_expr exp ~pos);
         search_pos_class_expr cl ~pos
     | Tcl_apply (cl, el) ->
@@ -785,7 +827,7 @@ and search_pos_class_expr ~pos cl =
     | Tcl_let (_, pel, iel, cl) ->
         List.iter pel ~f:
           begin fun {vb_pat=pat; vb_expr=exp} ->
-            search_pos_pat pat ~pos ~env:exp.exp_env;
+            search_pos_pat_val pat ~pos ~env:exp.exp_env;
             search_pos_expr exp ~pos
           end;
         List.iter iel ~f:(fun (_, exp) -> search_pos_expr exp ~pos);
@@ -798,8 +840,16 @@ and search_pos_class_expr ~pos cl =
       ~env:!start_env ~loc:cl.cl_loc
   end
 
-and search_case ~pos {c_lhs; c_guard; c_rhs} =
-  search_pos_pat c_lhs ~pos ~env:c_rhs.exp_env;
+and search_case_val ~pos {c_lhs; c_guard; c_rhs} =
+  search_pos_pat_val c_lhs ~pos ~env:c_rhs.exp_env;
+  begin match c_guard with
+  | None -> ()
+  | Some g -> search_pos_expr g ~pos
+  end;
+  search_pos_expr c_rhs ~pos
+
+and search_case_comp ~pos {c_lhs; c_guard; c_rhs} =
+  search_pos_pat_comp c_lhs ~pos ~env:c_rhs.exp_env;
   begin match c_guard with
   | None -> ()
   | Some g -> search_pos_expr g ~pos
@@ -818,22 +868,22 @@ and search_pos_expr ~pos exp =
   | Texp_let (_, expl, exp) ->
       List.iter expl ~f:
       begin fun {vb_pat=pat; vb_expr=exp'} ->
-        search_pos_pat pat ~pos ~env:exp.exp_env;
+        search_pos_pat_val pat ~pos ~env:exp.exp_env;
         search_pos_expr exp' ~pos
       end;
       search_pos_expr exp ~pos
   | Texp_function {cases=l; _} ->
-      List.iter l ~f:(search_case ~pos)
+      List.iter l ~f:(search_case_val ~pos)
   | Texp_apply (exp, l) ->
       List.iter l
         ~f:(fun (_, x) -> Stdlib.Option.iter (search_pos_expr ~pos) x);
       search_pos_expr exp ~pos
   | Texp_match (exp, l, _) ->
       search_pos_expr exp ~pos;
-      List.iter l ~f:(search_case ~pos)
+      List.iter l ~f:(search_case_comp ~pos)
   | Texp_try (exp, l) ->
       search_pos_expr exp ~pos;
-      List.iter l ~f:(search_case ~pos)
+      List.iter l ~f:(search_case_val ~pos)
   | Texp_tuple l -> List.iter l ~f:(search_pos_expr ~pos)
   | Texp_construct (_, _, l) -> List.iter l ~f:(search_pos_expr ~pos)
   | Texp_variant (_, None) -> ()
@@ -895,36 +945,6 @@ and search_pos_expr ~pos exp =
   add_found_str (`Exp(`Expr, exp.exp_type)) ~env:exp.exp_env ~loc:exp.exp_loc
   end
 
-and search_pos_pat ~pos ~env pat =
-  if in_loc pat.pat_loc ~pos then begin
-  begin match pat.pat_desc with
-    Tpat_any -> ()
-  | Tpat_var (id, _) ->
-      add_found_str (`Exp(`Val (Pident id), pat.pat_type))
-        ~env ~loc:pat.pat_loc
-  | Tpat_alias (pat, _, _) -> search_pos_pat pat ~pos ~env
-  | Tpat_lazy pat
-  | Tpat_exception pat -> search_pos_pat pat ~pos ~env
-  | Tpat_constant _ ->
-      add_found_str (`Exp(`Const, pat.pat_type)) ~env ~loc:pat.pat_loc
-  | Tpat_tuple l ->
-      List.iter l ~f:(search_pos_pat ~pos ~env)
-  | Tpat_construct (_, _, l) ->
-      List.iter l ~f:(search_pos_pat ~pos ~env)
-  | Tpat_variant (_, None, _) -> ()
-  | Tpat_variant (_, Some pat, _) -> search_pos_pat pat ~pos ~env
-  | Tpat_record (l, _) ->
-      List.iter l ~f:(fun (_, _, pat) -> search_pos_pat pat ~pos ~env)
-  | Tpat_array l ->
-      List.iter l ~f:(search_pos_pat ~pos ~env)
-  | Tpat_or (a, b, None) ->
-      search_pos_pat a ~pos ~env; search_pos_pat b ~pos ~env
-  | Tpat_or (_, _, Some _) ->
-      ()
-  end;
-  add_found_str (`Exp(`Pat, pat.pat_type)) ~env ~loc:pat.pat_loc
-  end
-
 and search_pos_module_expr ~pos (m :module_expr) =
   if in_loc m.mod_loc ~pos then begin
     begin match m.mod_desc with
@@ -948,7 +968,11 @@ let search_pos_structure ~pos str =
 open Stypes
 
 let search_pos_ti ~pos = function
-    Ti_pat p   -> search_pos_pat ~pos ~env:p.pat_env p
+    Ti_pat (cat,gp)   -> 
+    	begin match cat with
+	Value -> search_pos_pat_val ~pos ~env:gp.pat_env gp
+      | Computation -> search_pos_pat_comp ~pos ~env:gp.pat_env gp
+      end;
   | Ti_expr e  -> search_pos_expr ~pos e
   | Ti_class c -> search_pos_class_expr ~pos c
   | Ti_mod m   -> search_pos_module_expr ~pos m
Index: labltk-8.06.8/browser/viewer.ml
===================================================================
--- labltk-8.06.8.orig/browser/viewer.ml
+++ labltk-8.06.8/browser/viewer.ml
@@ -82,7 +82,8 @@ let view_symbol ~kind ~env ?path id =
 			                  then Some cd.cstr_res else None);
 			  ext_private = cd.cstr_private;
 			  ext_loc = cd.cstr_loc;
-			  ext_attributes = cd.cstr_attributes},
+			  ext_attributes = cd.cstr_attributes;
+			  ext_uid=Types.Uid.mk "sig"},
 			 (if Path.same cpath Predef.path_exn
                          then Text_exception
 			 else Text_first),
@@ -255,8 +256,8 @@ let view_defined ~env ?(show_all=false)
     let l = iter_sign sign [] in
     let title = string_of_path path in
     let env =
-      match open_signature Asttypes.Fresh path env with None -> env
-      | Some env -> env
+      match open_signature Asttypes.Fresh path env with Error _ -> env
+      | Ok env -> env
     in
     !choose_symbol_ref l ~title ~signature:sign ~env ~path;
     if show_all then view_signature sign ~title ~env ~path
