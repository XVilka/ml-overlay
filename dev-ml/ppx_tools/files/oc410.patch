Index: ppx_tools-5.3-4.08.0/ast_mapper_class.ml
===================================================================
--- ppx_tools-5.3-4.08.0.orig/ast_mapper_class.ml
+++ ppx_tools-5.3-4.08.0/ast_mapper_class.ml
@@ -173,10 +173,14 @@ module MT = struct
     | Pmty_ident s -> ident ~loc ~attrs (map_loc sub s)
     | Pmty_alias s -> alias ~loc ~attrs (map_loc sub s)
     | Pmty_signature sg -> signature ~loc ~attrs (sub # signature sg)
-    | Pmty_functor (s, mt1, mt2) ->
-        functor_ ~loc ~attrs (map_loc sub s)
-          (map_opt (sub # module_type) mt1)
+    | Pmty_functor (p, mt2) ->
+        ( match p with
+	  Unit -> functor_ ~loc ~attrs Unit (sub # module_type mt2)
+	| Named (s, mt1) ->
+          functor_ ~loc ~attrs 
+	    (Named( (map_loc sub s), ((sub # module_type) mt1)))
           (sub # module_type mt2)
+	  )
     | Pmty_with (mt, l) ->
         with_ ~loc ~attrs (sub # module_type mt)
           (List.map (sub # with_constraint) l)
@@ -227,10 +231,15 @@ module M = struct
     match desc with
     | Pmod_ident x -> ident ~loc ~attrs (map_loc sub x)
     | Pmod_structure str -> structure ~loc ~attrs (sub # structure str)
-    | Pmod_functor (arg, arg_ty, body) ->
-        functor_ ~loc ~attrs (map_loc sub arg)
-          (map_opt (sub # module_type) arg_ty)
+    | Pmod_functor (argfp, body) ->
+      (
+      match argfp with
+      Unit -> functor_ ~loc ~attrs Unit (sub # module_expr body)
+    | Named(arg,arg_ty) ->
+        functor_ ~loc ~attrs 
+	(Named((map_loc sub arg),((sub # module_type) arg_ty)))
           (sub # module_expr body)
+	  )
     | Pmod_apply (m1, m2) ->
         apply ~loc ~attrs (sub # module_expr m1) (sub # module_expr m2)
     | Pmod_constraint (m, mty) ->
Index: ppx_tools-5.3-4.08.0/genlifter.ml
===================================================================
--- ppx_tools-5.3-4.08.0.orig/genlifter.ml
+++ ppx_tools-5.3-4.08.0/genlifter.ml
@@ -49,8 +49,8 @@ module Main : sig end = struct
   let rec gen ty =
     if Hashtbl.mem printed ty then ()
     else let tylid = Longident.parse ty in
-      let td =
-        try Env.find_type (Env.lookup_type tylid env) env
+      let (_,td) =
+        try Env.find_type_by_name tylid env
         with Not_found ->
           Format.eprintf "** Cannot resolve type %s@." ty;
           exit 2
