commit bd93107955a3faa344c86064981ce35652503b29
Author: hhugo <hugo.heuzard@gmail.com>
Date:   Sun Jun 9 20:14:43 2019 +0800

    Support for OCaml 4.09 (#810)

diff --git a/runtime/stdlib.js b/runtime/stdlib.js
index 192f506f8..fc213a6e1 100644
--- a/runtime/stdlib.js
+++ b/runtime/stdlib.js
@@ -240,6 +240,13 @@ function caml_obj_truncate (x, s) {
   return 0;
 }
 
+//Provides: caml_obj_make_forward
+function caml_obj_make_forward (b,v) {
+  b[0]=250;
+  b[1]=v;
+  return 0
+}
+
 //Provides: caml_lazy_make_forward const (const)
 function caml_lazy_make_forward (v) { return [250, v]; }
 
@@ -1090,10 +1097,10 @@ function caml_sys_exit (code) {
   caml_invalid_argument("Function 'exit' not implemented");
 }
 
-//Provides: caml_sys_get_argv const
+//Provides: caml_argv
 //Requires: caml_js_to_string
 //Requires: raw_array_sub
-function caml_sys_get_argv () {
+var caml_argv = ((function () {
   var g = joo_global_object;
   var main = "a.out";
   var args = []
@@ -1111,7 +1118,36 @@ function caml_sys_get_argv () {
   var args2 = [0, p];
   for(var i = 0; i < args.length; i++)
     args2.push(caml_js_to_string(args[i]));
-  return [0, p, args2];
+  return args2;
+})())
+
+//Provides: caml_executable_name
+//Requires: caml_argv
+var caml_executable_name = caml_argv[1]
+
+//Provides: caml_sys_get_argv
+//Requires: caml_argv
+function caml_sys_get_argv (a) {
+  return [0, caml_argv[1], caml_argv];
+}
+
+//Provides: caml_sys_argv
+//Requires: caml_argv
+function caml_sys_argv (a) {
+  return caml_argv;
+}
+
+//Provides: caml_sys_modify_argv
+//Requires: caml_argv
+function caml_sys_modify_argv(arg){
+  caml_argv = arg;
+  return 0;
+}
+
+//Provides: caml_sys_executable_name const
+//Requires: caml_executable_name
+function caml_sys_executable_name(a){
+  return caml_executable_name
 }
 
 //Provides: unix_inet_addr_of_string
diff --git a/toplevel/lib/compat.ml-4.09 b/toplevel/lib/compat.ml-4.09
new file mode 100644
index 000000000..e42ea4d31
--- /dev/null
+++ b/toplevel/lib/compat.ml-4.09
@@ -0,0 +1,5 @@
+let reloc name =
+  let buf = Bytes.create 4 in
+  Symtable.patch_object [|buf|] [Reloc_setglobal (Ident.create_persistent name), 0];
+  let get i = Char.code (Bytes.get buf i) in
+  get 0 + (get 1 lsl 8) + (get 2 lsl 16) + (get 3 lsl 24)
diff --git a/toplevel/lib/dune b/toplevel/lib/dune
index 44b19b608..705bd9545 100644
--- a/toplevel/lib/dune
+++ b/toplevel/lib/dune
@@ -11,6 +11,7 @@
 (rule
   (targets js_of_ocaml_toplevel_compat.ml)
   (deps ../../tools/select/select.exe
+        compat.ml-4.09
         compat.ml-4.08
         compat.ml-default)
   (action (with-stdout-to %{targets} (run %{deps}))))
\ No newline at end of file
