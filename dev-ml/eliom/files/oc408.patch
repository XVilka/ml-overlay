commit 52044e0e837e41864fdff32fad385188b4ea3dd7
Author: Jérôme.Vouillon <jvouillon@besport.com>
Date:   Fri Jul 5 12:15:21 2019 +0200

    Adapt to OCaml 4.08

diff --git a/opam b/opam
index 27a1365f3..b63e5298a 100644
--- a/opam
+++ b/opam
@@ -11,7 +11,7 @@ license: "LGPL-2.1 with OCaml linking exception"
 dev-repo: "git+https://github.com/ocsigen/eliom.git"
 build: [make]
 depends: [
-  "ocaml" {>= "4.06.1"}
+  "ocaml" {>= "4.08.0"}
   "ocamlfind"
   "ppx_deriving"
   "ppx_tools" {>= "0.99.3"}
diff --git a/src/ocamlbuild/ocamlbuild_eliom.ml b/src/ocamlbuild/ocamlbuild_eliom.ml
index ecf99050d..77b15a217 100644
--- a/src/ocamlbuild/ocamlbuild_eliom.ml
+++ b/src/ocamlbuild/ocamlbuild_eliom.ml
@@ -188,7 +188,8 @@ module MakeIntern (I : INTERNALS)(Eliom : ELIOM) = struct
         sed_rule ".inferred.mli -> .inferred_gen.mli"
           ~dep:"%(path)/%(file).inferred.mli"
           ~prod:"%(path)/%(file).inferred_gen.mli"
-          ["s/_\\[\\([<>]\\)/[\\1/g";
+          ["s$/[1-9][0-9]*$$g";
+           "s/_\\[\\([<>]\\)/[\\1/g";
            Printf.sprintf "s/'\\(_[a-z0-9_]*\\)/'%s\\1/g" inferred_type_prefix];
 
         (* eliom files *)
diff --git a/src/ppx/ppx_eliom_type.ml b/src/ppx/ppx_eliom_type.ml
index c3d0d2ba3..967997ab6 100644
--- a/src/ppx/ppx_eliom_type.ml
+++ b/src/ppx/ppx_eliom_type.ml
@@ -75,7 +75,7 @@ module Pass = struct
       then
         typing_strs :=
           (id,
-           [%stri let [%p Pat.var id] = Pervasives.ref None]
+           [%stri let [%p Pat.var id] = Stdlib.ref None]
            [@metaloc orig_expr.pexp_loc]
           ) :: !typing_strs
     in
diff --git a/src/ppx/ppx_eliom_utils.ml b/src/ppx/ppx_eliom_utils.ml
index c7a4495a9..419dec3ba 100644
--- a/src/ppx/ppx_eliom_utils.ml
+++ b/src/ppx/ppx_eliom_utils.ml
@@ -232,7 +232,7 @@ module Mli = struct
   let load_file file =
     try
       let items =
-        Pparse.parse_interface ~tool_name:"eliom" Format.err_formatter file
+        Pparse.parse_interface ~tool_name:"eliom" file
       in
       let h = Hashtbl.create 17 in
       let f item = match get_binding item with
@@ -382,7 +382,7 @@ module Cannot_have_fragment = struct
     | Pexp_construct (_,e)
     | Pexp_variant (_,e) -> opt_forall expression e
     | Pexp_let (_,l,e) -> vb_forall expression l && expression e
-    | Pexp_open (_,x,e) -> longident x.txt && expression e
+    | Pexp_open (i,e) -> module_expr i.popen_expr && expression e
     | Pexp_letmodule (_,me,e) -> module_expr me && expression e
 
     (* We could be more precise on those constructs *)
@@ -430,7 +430,7 @@ module Cannot_have_fragment = struct
     | Pstr_primitive _ -> true
     | Pstr_module mb -> module_binding mb
     | Pstr_recmodule mbl -> List.for_all module_binding mbl
-    | Pstr_open x -> longident x.popen_lid.txt
+    | Pstr_open x -> module_expr x.popen_expr
     | Pstr_include x -> module_expr x.pincl_mod
 
     | _ -> false
diff --git a/src/tools/eliomc.ml b/src/tools/eliomc.ml
index 23b5c9a36..8aa8fb35f 100644
--- a/src/tools/eliomc.ml
+++ b/src/tools/eliomc.ml
@@ -208,9 +208,13 @@ let inferred_type_prefix = "eliom_inferred_type_"
    _[< ... ]
    _[> ... ]
 
+   It also removes type indices foo/2 (in case of ambiguity in
+   module interfaces).
+
    These appear in type_mli files, but they are not accepted by
    the OCaml parser.  *)
 let run_sed file =
+  run_command ("sed -i -e 's$/[1-9][0-9]*$$g' " ^ file);
   run_command ("sed -i -e 's/_\\[\\([<>]\\)/[\\1/g' " ^ file);
   run_command
     (Printf.sprintf
