Index: ocaml-dns-1.1.0/lib/loader.ml
===================================================================
--- ocaml-dns-1.1.0.orig/lib/loader.ml
+++ ocaml-dns-1.1.0/lib/loader.ml
@@ -274,8 +274,9 @@ let add_srv_rr pri weight port target tt
 let add_dnskey_rr flags typ key ttl owner db =
   let flags = flags in
   let typ = typ in
-  let tmp = B64.decode key in
-  let dnskey = Name.hashcons_string tmp in
+  match Base64.decode key with
+  Error (`Msg msg) -> failwith msg
+  | Ok tmp -> let dnskey = Name.hashcons_string tmp in
   add_rrset { ttl; rdata = DNSKEY [ (flags, typ, dnskey) ] } owner db
 
 (** valeur entiÃ¨re d'un chiffre hexa *)
@@ -344,7 +345,7 @@ let add_rrsig_rr typ alg lbl orig_ttl ex
       | Some a -> a
   in
     (* TODO: Check if sign is in the future or if the sign has expired *)
-  let sign = B64.decode sign in
+  let sign = (match Base64.decode sign with Error (`Msg msg) -> failwith msg | Ok s -> s) in
   let rr = RRSIG [{
     rrsig_type   = typ;
     rrsig_alg    = alg;
Index: ocaml-dns-1.1.0/lib/packet.ml
===================================================================
--- ocaml-dns-1.1.0.orig/lib/packet.ml
+++ ocaml-dns-1.1.0/lib/packet.ml
@@ -260,7 +260,7 @@ let rdata_to_string = function
   | DNSKEY (flags, alg, key)
     -> (sprintf "DNSKEY (%d, %s, %s)"
           flags (dnssec_alg_to_string alg)
-          (B64.encode key)
+          (match Base64.encode key with Error (`Msg msg) -> failwith msg | Ok s -> s)
     )
   | HINFO (cpu, os) -> sprintf "HINFO (%s, %s)" cpu os
   | ISDN (a, sa)
@@ -292,7 +292,7 @@ let rdata_to_string = function
   | SRV (x, y, z, n)
     -> sprintf "SRV (%d,%d,%d, %s)" x y z (Name.to_string n)
   | TXT sl -> sprintf "TXT (%s)" (String.concat "" sl)
-  | UNKNOWN (x, bs) -> sprintf "UNKNOWN (%d) '%s'" x (B64.encode bs)
+  | UNKNOWN (x, bs) -> sprintf "UNKNOWN (%d) '%s'" x (match Base64.encode bs with Error (`Msg msg) -> failwith msg | Ok s -> s)
   (* | UNSPEC bs -> sprintf "UNSPEC (%s)" bs*)
   | WKS (a, y, s) ->
     sprintf "WKS (%s, %d, %s)" (Ipaddr.V4.to_string a) (Cstruct.byte_to_int y) s
@@ -304,11 +304,11 @@ let rdata_to_string = function
       sprintf "RRSIG (%s %s %d %ld %ld %ld %d %s %s)"
         (rr_type_to_string typ)
         (dnssec_alg_to_string alg) (int_of_char lbl) orig_ttl exp_ts inc_ts
-        tag (Name.to_string name) (B64.encode sign)
+        tag (Name.to_string name) (match Base64.encode sign with Error (`Msg msg) -> failwith msg | Ok s -> s)
   | SIG  (alg, exp_ts, inc_ts, tag, name, sign) ->
       sprintf "SIG (UNUSED %s 0 0 %ld %ld %d %s %s)"
         (dnssec_alg_to_string alg) exp_ts inc_ts
-        tag (Name.to_string name) (B64.encode sign)
+        tag (Name.to_string name) (match Base64.encode sign with Error (`Msg msg) -> failwith msg | Ok s -> s)
    | DS (keytag, alg, digest_t, digest)
     -> (sprintf "DS (%d,%s,%s, '%s')" keytag
           (dnssec_alg_to_string alg) (digest_alg_to_string digest_t)
