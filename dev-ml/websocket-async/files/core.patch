Index: ocaml-websocket-2.13/async/websocket_async.ml
===================================================================
--- ocaml-websocket-2.13.orig/async/websocket_async.ml
+++ ocaml-websocket-2.13/async/websocket_async.ml
@@ -68,11 +68,11 @@ let client
         Reader.contents r >>= fun msg ->
         Logs_async.err ~src (fun m -> m "%s" msg) >>= fun () ->
         failwith @@ "HTTP Error " ^ Code.(string_of_status status)
-      else if Cohttp.Response.version response <> `HTTP_1_1 then failwith "HTTP version error"
-      else if status <> `Switching_protocols then failwith @@ "status error " ^ Code.(string_of_status status)
-      else if Header.(get headers "upgrade") |> Option.map ~f:String.lowercase  <> Some "websocket" then failwith "upgrade error"
+      else if Cohttp.Code.compare_version (Cohttp.Response.version response) `HTTP_1_1 <> 0 then failwith "HTTP version error"
+      else if Cohttp.Code.code_of_status status <> Cohttp.Code.code_of_status `Switching_protocols then failwith @@ "status error " ^ Code.(string_of_status status)
+      else if Option.compare String.compare (Header.(get headers "upgrade") |> Option.map ~f:String.lowercase) (Some "websocket") <> 0 then failwith "upgrade error"
       else if not @@ upgrade_present headers then failwith "update not present"
-      else if Header.get headers "sec-websocket-accept" <> Some (nonce ^ websocket_uuid |> b64_encoded_sha1sum) then failwith "accept error"
+      else if Option.compare String.compare (Header.get headers "sec-websocket-accept") (Some (nonce ^ websocket_uuid |> b64_encoded_sha1sum)) <> 0 then failwith "accept error"
       else Deferred.unit
   in
   let run () =
@@ -139,7 +139,7 @@ let client_ez
       ~opcode:Frame.Opcode.Ping
       ~content:(Time_ns.to_string_fix_proto `Utc now) () >>| fun () ->
     let time_since_last_pong = Time_ns.diff now !last_pong in
-    if !last_pong > Time_ns.epoch
+    if Time_ns.Span.to_int_sec (Time_ns.to_span_since_epoch !last_pong) > 0
     && Time_ns.Span.(time_since_last_pong > span + span) then
       Lazy.force cleanup
   in
@@ -236,9 +236,9 @@ let server
     let version = Cohttp.Request.version request in
     let headers = Cohttp.Request.headers request in
     if not begin
-        version = `HTTP_1_1
-        && meth = `GET
-        && Option.map (Header.get headers "upgrade") ~f:String.lowercase = Some "websocket"
+        Code.compare_version version `HTTP_1_1 = 0
+        && Code.compare_method meth `GET = 0
+        && Option.compare String.compare (Option.map (Header.get headers "upgrade") ~f:String.lowercase) (Some "websocket") = 0
         && upgrade_present headers
       end
     then failwith "Protocol error";
Index: ocaml-websocket-2.13/async/wscat.ml
===================================================================
--- ocaml-websocket-2.13.orig/async/wscat.ml
+++ ocaml-websocket-2.13/async/wscat.ml
@@ -63,7 +63,7 @@ let handle_client addr reader writer =
     Logs_async.info ~src begin fun m ->
       m "Incoming connnection request: %a" Cohttp.Request.pp_hum req
     end >>= fun () ->
-    Deferred.return (Cohttp.Request.(uri req |> Uri.path) = "/ws")
+    Deferred.return (String.compare (Cohttp.Request.(uri req |> Uri.path)) "/ws" = 0)
   in
   let rec loop () =
     Pipe.read receiver_read >>= function
@@ -103,7 +103,7 @@ let handle_client addr reader writer =
   Deferred.any [
     begin server
         ~check_request ~app_to_ws ~ws_to_app ~reader ~writer () >>= function
-      | Error err when Error.to_exn err = Exit -> Deferred.unit
+      | Error err when Error.equal err (Error.of_exn Exit) -> Deferred.unit
       | Error err -> Error.raise err
       | Ok () -> Deferred.unit
     end ;
