Index: ppx_import-1.6.2/src/ppx_import.ml
===================================================================
--- ppx_import-1.6.2.orig/src/ppx_import.ml
+++ ppx_import-1.6.2/src/ppx_import.ml
@@ -11,9 +11,9 @@ open Types
 
 module Tt = Ppx_types_migrate
 
-let raise_errorf ?sub ?if_highlight ?loc message =
+let raise_errorf ?sub ?loc message =
   message |> Printf.kprintf (fun str ->
-    let err = Location.error ?sub ?if_highlight ?loc str in
+    let err = Location.error ?loc ?sub str in
     raise (Location.Error err))
 
 let replace_loc loc =
@@ -96,7 +96,7 @@ let rec try_open_module_type env module_
   match module_type with
   | Mty_signature sig_items -> Some sig_items
   | Mty_functor _ -> None
-  | (Mty_ident path | Mty_alias (_, path) ) ->
+  | (Mty_ident path | Mty_alias (path) ) ->
     begin match
         (try Some (Env.find_module path env) with Not_found -> None)
       with
@@ -131,10 +131,10 @@ let locate_sig ~loc env lid =
     let sig_items = open_module_type ~loc env lid module_type in
     let rec loop sig_items =
       match sig_items with
-      | Sig_module (id, { md_type ; _ }, _) :: _
+      | Sig_module (id, _, { md_type ; _ }, _, _) :: _
         when Ident.name id = path_item ->
         md_type
-      | Sig_modtype (id, { mtd_type = Some md_type ; _ }) :: _
+      | Sig_modtype (id, { mtd_type = Some md_type ; _ }, _) :: _
         when Ident.name id = path_item ->
         md_type
       | _ :: sig_items ->
@@ -162,7 +162,7 @@ let try_get_tsig_item f ~loc:_ sig_items
 
 let get_type_decl ~loc sig_items parent_lid elem =
   let select_type elem = function
-    | Sig_type (id, type_decl, _) when Ident.name id = elem -> Some type_decl
+    | Sig_type (id, type_decl, _, _) when Ident.name id = elem -> Some type_decl
     | _ -> None
   in
   match try_get_tsig_item select_type ~loc sig_items elem with
@@ -173,7 +173,7 @@ let get_type_decl ~loc sig_items parent_
 
 let get_modtype_decl ~loc sig_items parent_lid elem =
   let select_modtype elem = function
-    | Sig_modtype (id, type_decl) when Ident.name id = elem -> Some type_decl
+    | Sig_modtype (id, type_decl, _) when Ident.name id = elem -> Some type_decl
     | _ -> None
   in
   match try_get_tsig_item select_modtype ~loc sig_items elem with
@@ -185,7 +185,7 @@ let get_modtype_decl ~loc sig_items pare
 let rec longident_of_path path =
   match path with
   | Path.Pident id -> Lident (Ident.name id)
-  | Path.Pdot (path, name, _) -> Ldot (longident_of_path path, name)
+  | Path.Pdot (path, name) -> Ldot (longident_of_path path, name)
   | Path.Papply (lhs, rhs) -> Lapply (longident_of_path lhs, longident_of_path rhs)
 
 let rec core_type_of_type_expr ~subst type_expr =
@@ -386,14 +386,14 @@ let type_declaration ~tool_name mapper t
 
 let rec cut_tsig_block_of_rec_types accu tsig =
   match tsig with
-  | Sig_type (id, ttype_decl, Trec_next) :: rest ->
+  | Sig_type (id, ttype_decl, Trec_next, _) :: rest ->
       cut_tsig_block_of_rec_types ((id, ttype_decl) :: accu) rest
   | _ ->
       (List.rev accu, tsig)
 
 let rec psig_of_tsig ~subst tsig =
   match tsig with
-  | Sig_type (id, ttype_decl, rec_flag) :: rest ->
+  | Sig_type (id, ttype_decl, rec_flag, _) :: rest ->
       let accu = [(id, ttype_decl)] in
       let (rec_flag, (block, rest)) =
         match rec_flag with
@@ -405,7 +405,7 @@ let rec psig_of_tsig ~subst tsig =
           (Location.mknoloc (Ident.name id)) ttype_decl) in
       let psig_desc = Psig_type(rec_flag, block) in
       { psig_desc; psig_loc = Location.none } :: psig_of_tsig ~subst rest
-  | Sig_value (id, { val_type; val_kind; val_loc; val_attributes }) :: rest ->
+  | Sig_value (id, { val_type; val_kind; val_loc; val_attributes }, _) :: rest ->
     let pval_prim =
       match val_kind with
       | Val_reg -> []
Index: ppx_import-1.6.2/src/ppx_types_migrate.ml
===================================================================
--- ppx_import-1.6.2.orig/src/ppx_types_migrate.ml
+++ ppx_import-1.6.2/src/ppx_types_migrate.ml
@@ -32,6 +32,7 @@ let copy_attributes (l : Pt.attributes)
   let td = Pt.({ ptyp_desc = Ptyp_any;
                  ptyp_loc = Location.none;
                  ptyp_attributes = l;
+		 ptyp_loc_stack = [];
                } ) in
   let td = IMigrate.copy_core_type td in
   td.ptyp_attributes
